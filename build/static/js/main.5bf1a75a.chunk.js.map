{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","store","storage","db","database","uiConfig","signInFlow","signInSuccessUrl","callbacks","signInSuccess","window","location","href","includes","replace","name","localStorage","getItem","signInOptions","auth","GoogleAuthProvider","PROVIDER_ID","GithubAuthProvider","shuffle","array","sort","Math","random","Choose","props","React","useState","names","setNames","useEffect","a","ref","once","snap","expData","val","Object","keys","getExperiments","then","Fragment","map","n","key","onClick","setItem","setName","assign","type","Main","user","currentUser","checked","setChecked","aFirstList","setAFirstList","handle","useRef","urlsA","setUrlsA","urlsB","setUrlsB","selected","setSelected","submitting","setSubmitting","current","onAuthStateChanged","u","history","push","displayName","email","photoURL","uid","providerId","child","set","photoUrl","shouldSet","qs","parse","search","expName","dirASnap","dirBSnap","dirA","dirB","listAll","itemsA","items","itemsB","b","listImages","length","Promise","all","getDownloadURL","aUrls","bUrls","ordering","floor","to","from","className","signOut","url","idx","aFirst","aImg","vote","src","alt","nextSelected","bImg","disabled","filter","opt","clear","scrollTo","top","left","behavior","Auth","firebaseAuth","App","prevName","handleSetName","exact","path","render","component","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5bf1a75a.chunk.js","sourcesContent":["import React from 'react';\nimport firebase from 'firebase';\nimport qs from 'query-string';\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport './App.css';\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyDc8kZCL0_ai9tCds8bwXYiJiy8xgEv3uU',\n  authDomain: 'experiments-573d7.firebaseapp.com',\n  databaseURL: 'https://experiments-573d7.firebaseio.com',\n  projectId: 'experiments-573d7',\n  storageBucket: 'experiments-573d7.appspot.com',\n  messagingSenderId: '450691706719',\n  appId: '1:450691706719:web:e60b4879afd17d34cbd0ea',\n  measurementId: 'G-CHD125KKCH',\n};\n\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nconst store = firebase.storage();\nconst db = firebase.database();\n\n// Configure FirebaseUI.\nconst uiConfig = {\n  // Popup signin flow rather than redirect flow.\n  signInFlow: 'popup',\n  // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n  signInSuccessUrl: '/exp',\n  callbacks: {\n    signInSuccess: () => {\n      if (window.location.href.includes('choose')) {\n        window.location.replace('/exp/choose');\n      } else {\n        const name = localStorage.getItem('name') || 'default';\n        window.location.replace(`/exp?n=${name}`);\n      }\n    },\n  },\n  // We will display Google and Facebook as auth providers.\n  signInOptions: [\n    firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n    firebase.auth.GithubAuthProvider.PROVIDER_ID\n  ]\n};\n\nfunction shuffle(array) {\n  return array.sort(() => Math.random() - 0.5);\n}\n\nfunction coinFlip() {\n  return Math.floor(Math.random() * 2) === 0;\n}\n\nfunction Choose(props) {\n  const [names, setNames] = React.useState([]);\n\n  React.useEffect(() => {\n    const getExperiments = async () => {\n      const snap = await db.ref('meta').once('value');\n      const expData = snap.val();\n      return Object.keys(expData || {});\n    };\n\n    getExperiments().then((names) => {\n      setNames(names);\n    });\n  }, []);\n\n  return (\n    <React.Fragment>\n      {names.map((n) => {\n        return (\n          <React.Fragment>\n            <button\n              key={n}\n              onClick={() => {\n                localStorage.setItem('name', n);\n                props.setName(n);\n                window.location.assign(`/exp?n=${n}`);\n              }}\n              type=\"button\"\n            >\n              {n}\n            </button>\n            <br />\n          </React.Fragment>\n        );\n      })}\n    </React.Fragment>\n  );\n}\n\nfunction Main(props) {\n  const { name } = props;\n\n  const user = firebase.auth().currentUser;\n  const [checked, setChecked] = React.useState(false);\n  const [aFirstList, setAFirstList] = React.useState([]);\n\n  const handle = React.useRef();\n\n  const [urlsA, setUrlsA] = React.useState([]);\n  const [urlsB, setUrlsB] = React.useState([]);\n\n  const [selected, setSelected] = React.useState([]);\n\n  const [submitting, setSubmitting] = React.useState(false);\n\n  React.useEffect(() => {\n    handle.current = firebase.auth().onAuthStateChanged(async (u) => {\n      setChecked(true);\n\n      if (!u) {\n        props.history.push('/');\n      } else {\n        const { displayName, email, photoURL, uid, providerId } = u;\n        await db.ref('users').child(uid).set({ displayName, email, photoUrl: photoURL, uid, providerId });\n      }\n\n      return () => {\n        handle.current();\n      };\n    });\n  });\n\n  React.useEffect(() => {\n    let shouldSet = true;\n\n    if (user) {\n      const listImages = async () => {\n        const { n } = qs.parse(window.location.search);\n        const expName = n || 'default';\n        const dirASnap = await db.ref('meta').child(expName).child('a_dir').once('value');\n        const dirBSnap = await db.ref('meta').child(expName).child('b_dir').once('value');\n        const dirA = dirASnap.val();\n        const dirB = dirBSnap.val();\n        const { items: itemsA } = await store.ref(dirA).listAll();\n        const { items: itemsB } = await store.ref(dirB).listAll();\n        return { a: itemsA, b: itemsB };\n      };\n\n      listImages().then(async ({ a, b }) => {\n        if (shouldSet && !urlsA.length && !urlsB.length) {\n          const aUrls = await Promise.all(a.map(async (ref) => {\n            return ref.getDownloadURL();\n          }));\n          const bUrls = await Promise.all(b.map(async (ref) => {\n            return ref.getDownloadURL();\n          }));\n          const ordering = aUrls.map(() => coinFlip());\n          setUrlsA(shuffle(aUrls));\n          setUrlsB(shuffle(bUrls));\n          setAFirstList(ordering);\n        }\n      });\n    }\n\n    return () => {\n      shouldSet = false;\n    };\n  }, [name, urlsA.length, urlsB.length, user]);\n\n  if (!user && checked) {\n    return <Redirect to=\"/\" />\n  }\n\n  if (name === null) {\n    return <Redirect from=\"/exp\" to=\"/exp/choose\" />\n  }\n\n  return (\n    <div className='App'>\n      <div className=\"App-header images\">\n        {!!user && (\n          <React.Fragment>\n            <button\n              className=\"btn choose\"\n              type=\"button\"\n              onClick={() => {\n                props.history.push('/exp/choose');\n              }}\n            >\n              Choose Experiment\n            </button>\n\n            <button\n              className=\"btn logout\"\n              type=\"button\"\n              onClick={async () => {\n                await firebase.auth().signOut();\n              }}\n            >\n              Logout\n            </button>\n          </React.Fragment>\n        )}\n\n        <span className=\"title\">Which is best?</span>\n        <br />\n        {urlsA.length === urlsB.length && urlsA.map((url, idx) => {\n          const aFirst = aFirstList[idx];\n          const b = urlsB[idx];\n\n          const aImg = (\n            <img\n              className={`exp-image${selected[idx] && selected[idx].vote === 'a' ? ' selected' : ''}`}\n              src={url}\n              alt={url}\n              onClick={() => {\n                const nextSelected = [...selected];\n                nextSelected[idx] = {\n                  a: url,\n                  b: b,\n                  vote: 'a',\n                };\n                setSelected(nextSelected);\n              }}\n            />\n          );\n\n          const bImg = (\n            <img\n              className={`exp-image${selected[idx] && selected[idx].vote === 'b' ? ' selected' : ''}`}\n              src={b}\n              alt={b}\n              onClick={() => {\n                const nextSelected = [...selected];\n                nextSelected[idx] = nextSelected[idx] = {\n                  a: url,\n                  b: b,\n                  vote: 'b',\n                };\n                setSelected(nextSelected);\n              }}\n            />\n          );\n\n          return (\n            <React.Fragment key={url}>\n              <div className=\"exp-image-wrap\">\n                {aFirst && (\n                  <React.Fragment>\n                    {aImg}\n                    {bImg}\n                  </React.Fragment>\n                )}\n\n                {!aFirst && (\n                  <React.Fragment>\n                    {bImg}\n                    {aImg}\n                  </React.Fragment>\n                )}\n\n                <div\n                  className={`none exp-image${selected[idx] && selected[idx].vote === 'none' ? ' selected' : ''}`}\n                  onClick={() => {\n                    const nextSelected = [...selected];\n                    nextSelected[idx] = nextSelected[idx] = {\n                      a: url,\n                      b: b,\n                      vote: 'none',\n                    };\n                    setSelected(nextSelected);\n                  }}\n                >\n                  <span>None</span>\n                </div>\n              </div>\n\n              {idx < urlsA.length - 1 && (\n                <hr />\n              )}\n            </React.Fragment>\n          );\n        })}\n\n        <button\n          className=\"btn done\"\n          disabled={submitting || selected.filter(opt => !!opt).length !== urlsA.length}\n          type=\"button\"\n          onClick={async () => {\n            if (!submitting) {\n              setSubmitting(true);\n              const { n } = qs.parse(window.location.search);\n              const expName = n || 'default';\n              const { uid } = firebase.auth().currentUser;\n              await db.ref('results').child(expName).child(uid).push(selected);\n              localStorage.clear();\n              setSelected([]);\n              setSubmitting(false);\n              window.scrollTo({\n                top: 0,\n                left: 0,\n                behavior: 'smooth',\n              });\n            }\n          }}\n        >\n          Save\n        </button>\n      </div>\n    </div>\n  );\n}\n\nfunction Auth(props) {\n  const [checked, setChecked] = React.useState(false);\n\n  const handle = React.useRef();\n\n  React.useEffect(() => {\n    handle.current = firebase.auth().onAuthStateChanged(async (user) => {\n      setChecked(true);\n\n      if (user) {\n        const { displayName, email, photoURL, uid, providerId } = user;\n        await db.ref('users').child(uid).set({ displayName, email, photoUrl: photoURL, uid, providerId });\n        props.history.push(`/exp?n=${props.name || 'default'}`);\n      }\n    });\n\n    return () => {\n      handle.current();\n    };\n  });\n\n  if (checked && firebase.auth().currentUser) {\n    return <Redirect to={`/exp?n=${props.name || 'default'}`} />;\n  }\n\n  return (\n    <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()}/>\n  );\n}\n\nfunction App() {\n  const [name, setName] = React.useState(null);\n\n  React.useEffect(() => {\n    const prevName = localStorage.getItem('name');\n\n    if (!name) {\n      const { n } = qs.parse(window.location.search);\n\n      if (n) {\n        localStorage.setItem('name', n);\n        setName(n);\n      } else if (prevName) {\n        setName(n);\n      } else {\n        localStorage.setItem('name', '');\n        setName('');\n      }\n    }\n  }, []);\n\n  const handleSetName = (n) => {\n    localStorage.setItem('name', n);\n    setName(n);\n    window.location.replace(`/exp?n=${n}`);\n  };\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/exp/choose\" render={() => (\n          <Choose setName={handleSetName} />\n        )} />\n        <Route path=\"/exp\" component={Main} name={name} />\n        <Route path=\"/\" component={Auth} name={name} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}