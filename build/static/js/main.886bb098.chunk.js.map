{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","store","storage","db","database","uiConfig","signInFlow","signInSuccessUrl","signInOptions","auth","GoogleAuthProvider","PROVIDER_ID","GithubAuthProvider","shuffle","array","sort","Math","random","Main","props","user","currentUser","React","useState","checked","setChecked","handle","useRef","urlsA","setUrlsA","urlsB","setUrlsB","selected","setSelected","submitting","setSubmitting","useEffect","current","onAuthStateChanged","u","history","push","shouldSet","a","ref","child","once","dirASnap","dirBSnap","dirA","val","dirB","listAll","itemsA","items","itemsB","b","listImages","then","length","Promise","all","map","getDownloadURL","aUrls","bUrls","to","className","type","onClick","signOut","url","idx","Fragment","key","vote","src","alt","nextSelected","disabled","filter","opt","uid","window","scrollTo","top","left","behavior","Auth","firebaseAuth","App","path","component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.886bb098.chunk.js","sourcesContent":["import React from 'react';\nimport firebase from 'firebase';\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport './App.css';\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyDc8kZCL0_ai9tCds8bwXYiJiy8xgEv3uU',\n  authDomain: 'experiments-573d7.firebaseapp.com',\n  databaseURL: 'https://experiments-573d7.firebaseio.com',\n  projectId: 'experiments-573d7',\n  storageBucket: 'experiments-573d7.appspot.com',\n  messagingSenderId: '450691706719',\n  appId: '1:450691706719:web:e60b4879afd17d34cbd0ea',\n  measurementId: 'G-CHD125KKCH',\n};\n\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nconst store = firebase.storage();\nconst db = firebase.database();\n\n// Configure FirebaseUI.\nconst uiConfig = {\n  // Popup signin flow rather than redirect flow.\n  signInFlow: 'popup',\n  // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n  signInSuccessUrl: '/exp',\n  // We will display Google and Facebook as auth providers.\n  signInOptions: [\n    firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n    firebase.auth.GithubAuthProvider.PROVIDER_ID\n  ]\n};\n\nfunction shuffle(array) {\n  return array.sort(() => Math.random() - 0.5);\n}\n\nfunction Main(props) {\n  const user = firebase.auth().currentUser;\n  const [checked, setChecked] = React.useState(false);\n\n  const handle = React.useRef();\n\n  const [urlsA, setUrlsA] = React.useState([]);\n  const [urlsB, setUrlsB] = React.useState([]);\n\n  const [selected, setSelected] = React.useState([]);\n\n  const [submitting, setSubmitting] = React.useState(false);\n\n  React.useEffect(() => {\n    handle.current = firebase.auth().onAuthStateChanged((u) => {\n      setChecked(true);\n\n      if (!u) {\n        props.history.push('/');\n      }\n\n      return () => {\n        handle.current();\n      };\n    });\n  });\n\n  React.useEffect(() => {\n    let shouldSet = true;\n\n    if (user) {\n      const listImages = async () => {\n        const dirASnap = await db.ref('meta').child('a_dir').once('value');\n        const dirBSnap = await db.ref('meta').child('b_dir').once('value');\n        const dirA = dirASnap.val();\n        const dirB = dirBSnap.val();\n        const { items: itemsA } = await store.ref(dirA).listAll();\n        const { items: itemsB } = await store.ref(dirB).listAll();\n        return { a: itemsA, b: itemsB };\n      };\n\n      listImages().then(async ({ a, b }) => {\n        if (shouldSet && !urlsA.length && !urlsB.length) {\n          const aUrls = await Promise.all(a.map(async (ref) => {\n            return ref.getDownloadURL();\n          }));\n          const bUrls = await Promise.all(b.map(async (ref) => {\n            return ref.getDownloadURL();\n          }));\n          setUrlsA(shuffle(aUrls));\n          setUrlsB(shuffle(bUrls));\n        }\n      });\n    }\n\n    return () => {\n      shouldSet = false;\n    };\n  }, [urlsA.length, urlsB.length, user]);\n\n  if (!user && checked) {\n    return <Redirect to=\"/\" />\n  }\n\n  return (\n    <div className='App'>\n      <div className=\"App-header images\">\n        {!!user && (\n          <button\n            className=\"btn logout\"\n            type=\"button\"\n            onClick={async () => {\n              await firebase.auth().signOut();\n            }}\n          >\n            Logout\n          </button>\n        )}\n\n        <span className=\"title\">Which is better?</span>\n        <br />\n        {urlsA.length === urlsB.length && urlsA.map((url, idx) => {\n          const b = urlsB[idx];\n\n          return (\n            <React.Fragment key={url}>\n              <div className=\"exp-image-wrap\">\n                <img\n                  className={`exp-image${selected[idx] && selected[idx].vote === 'a' ? ' selected' : ''}`}\n                  src={url}\n                  alt={url}\n                  onClick={() => {\n                    const nextSelected = [...selected];\n                    nextSelected[idx] = {\n                      a: url,\n                      b: b,\n                      vote: 'a',\n                    };\n                    setSelected(nextSelected);\n                  }}\n                />\n\n                <img\n                  className={`exp-image${selected[idx] && selected[idx].vote === 'b' ? ' selected' : ''}`}\n                  src={b}\n                  alt={b}\n                  onClick={() => {\n                    const nextSelected = [...selected];\n                    nextSelected[idx] = nextSelected[idx] = {\n                      a: url,\n                      b: b,\n                      vote: 'b',\n                    };\n                    setSelected(nextSelected);\n                  }}\n                />\n              </div>\n\n              {idx < urlsA.length - 1 && (\n                <hr />\n              )}\n            </React.Fragment>\n          );\n        })}\n\n        <button\n          className=\"btn done\"\n          disabled={submitting || selected.filter(opt => !!opt).length !== urlsA.length}\n          type=\"button\"\n          onClick={async () => {\n            if (!submitting) {\n              setSubmitting(true);\n              const { uid } = firebase.auth().currentUser;\n              await db.ref('results').child(uid).push(selected);\n              setSelected([]);\n              setSubmitting(false);\n              window.scrollTo({\n                top: 0,\n                left: 0,\n                behavior: 'smooth',\n              });\n            }\n          }}\n        >\n          Done\n        </button>\n      </div>\n    </div>\n  );\n}\n\nfunction Auth(props) {\n  const [checked, setChecked] = React.useState(false);\n\n  const handle = React.useRef();\n\n  React.useEffect(() => {\n    handle.current = firebase.auth().onAuthStateChanged((user) => {\n      setChecked(true);\n\n      if (user) {\n        props.history.push('/exp');\n      }\n    });\n\n    return () => {\n      handle.current();\n    };\n  });\n\n  if (checked && firebase.auth().currentUser) {\n    return <Redirect to=\"/exp\" />;\n  }\n\n  return (\n    <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()}/>\n  );\n}\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/exp\" component={Main} />\n        <Route path=\"/\" component={Auth}  />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}